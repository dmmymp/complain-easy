import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const { complaint, name, companyName, regulatoryBodies } = await req.json();

    if (
      !complaint ||
      !name ||
      typeof complaint !== "string" ||
      typeof name !== "string" ||
      !complaint.trim() ||
      !name.trim()
    ) {
      return NextResponse.json(
        { error: "Complaint and name are required and must be non-empty strings" },
        { status: 400 }
      );
    }

    const header = `\n${new Date().toLocaleDateString("en-GB", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    })}\n\n`;
    const recipient = companyName || "Sir/Madam";
    const ccLine = regulatoryBodies && regulatoryBodies.length > 0 ? `CC: ${regulatoryBodies.join(", ")}\n\n` : "";

    const prompt = `You are a professional editor assisting a consumer with a complaint. Rephrase the following complaint to be concise, polite, and professional. If unsure of the recipient, then it is 'Sir or Madam'. Ensure it remains persuasive and effective, avoiding unnecessary repetition. Keep the key facts intact.

    Original Complaint:
    ${complaint}

    Rephrased Complaint (under 500 words, clear and concise):`;

    const apiKey = process.env.MISTRAL_API_KEY;
    if (!apiKey) {
      console.error("MISTRAL_API_KEY is missing");
      return NextResponse.json({ error: "Server configuration error: Missing API key" }, { status: 500 });
    }

    const response = await fetch("https://api.mistral.ai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "mistral-small",
        messages: [
          { role: "system", content: "You are a professional editor." },
          { role: "user", content: prompt },
        ],
        max_tokens: 400,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const text = await response.text();
      console.error("Mistral API error:", response.status, text);
      return NextResponse.json({ error: `Mistral API failed: ${text}` }, { status: 500 });
    }

    const data = await response.json();
    console.log("Mistral API raw response:", data);
    const generatedText = data.choices?.[0]?.message?.content || "";
    if (!generatedText) {
      console.error("No content in Mistral response");
      return NextResponse.json({ error: "No tidied complaint generated by Mistral" }, { status: 500 });
    }

    const tidiedBodyMatch = generatedText.match(/Rephrased Complaint.*?:\s*([\s\S]*)/i);
    const tidiedBody = (tidiedBodyMatch ? tidiedBodyMatch[1] : generatedText).trim();

    if (!tidiedBody || tidiedBody.length < 10) {
      console.error("Invalid tidied complaint body:", tidiedBody);
      return NextResponse.json({ error: "Generated complaint is too short or invalid" }, { status: 500 });
    }

    const tidiedComplaint = `${header}${recipient}\n\n${ccLine}${tidiedBody}`;
    return NextResponse.json({ tidiedComplaint });
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : String(err);
    console.error("API Error in tidyComplaint:", errorMessage, "Stack:", err instanceof Error ? err.stack : "N/A");
    return NextResponse.json({ error: `Failed to tidy complaint: ${errorMessage}` }, { status: 500 });
  }
}